steps to hack first binary file
-What do we do first?

1) docker container
2) docker container Epic Treasure (pwn tools,  gef, debugging tools)

3) file on RE1_64bit

4) Let's just run it! ./RE1_64bit 7074

5) OK. We have a binary file, we can't guess the password,
so lets decompile the code (reverse engienering) and see what's going on

6)First, we see the enter password prompt. Next, we see a gets() function... What does it do?
--> Well, we see that it takes a local variable of size 44... So, maybe what gets() is
doing is it's taking in our input directly after the prompt, and putting it into our local
variable (lets call it buffer)...

7) To fact check what I just said lets look at the man page..Lets look at it's BUGS
8)OK. So as an attacker, that seems to be a vulnerability.

9)We found the vulnerabiltiy, now lets break the program so it can give us what we want

10) Let's gdb the file
11) disass main shows us the disassembly of the file
12) we can see the call to gets... our input is coming from 

gdb --args RE1_64bit 7074


13) So, lets see here where our input is going, and check it's surrounding local variables

14)Input on the stack: 0x007fffffffe3f0
15)Other local variable? 0x7fffffffe41c

16) Let's see what we can overwrite to change our local variable
16.5) we can see here in gdb after gets(), upon the comparison with 0, rbp-0x4 is called, so let's
see if we can overwrite that

16.5) we're overwriting that because the address of our input is: 0x007fffffffe3f0
and the address of rbp-0x4 is 0x7fffffffe41c -- offset of 44 bytes

17) Instead of using a bunch of characters to break it though, we can be cool
and use an exploit and run that to give us the flag.






